deploy-vault:
  stage: deploy
  image:
    name: hashicorp/vault:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  tags:
    - firstvds
  before_script:
    - apk add --no-cache git
  script:
    - echo "Cloning HashiCorp Helm chart"
    - git clone https://github.com/hashicorp/vault-helm.git --depth 1

.terraform-template:
  image: 
    name: registry.gitlab.com/gitlab-org/terraform-images/terraform:latest
    entrypoint: [""]
  tags:
    - firstvds
  before_script:
    - set -e

    - apk add --no-cache git

    - cd ${TF_ROOT}

    - echo "Cloning HashiCorp Vault Helm chart..."
    - rm -rf vault-helm
    - git clone https://github.com/hashicorp/vault-helm.git --depth 1

    - export TF_HTTP_USERNAME="gitlab-ci-token"
    - export TF_HTTP_PASSWORD="${CI_JOB_TOKEN}"

    - export GITLAB_TF_ADDRESS=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}
    - |
      terraform init -reconfigure \
        -backend-config="address=${GITLAB_TF_ADDRESS}" \
        -backend-config="lock_address=${GITLAB_TF_ADDRESS}/lock" \
        -backend-config="unlock_address=${GITLAB_TF_ADDRESS}/lock" \
        -backend-config="lock_method=POST" \
        -backend-config="unlock_method=DELETE" \
        -backend-config="retry_wait_min=5"
    - |
      if ! minikube status -p $MINIKUBE_PROFILE | grep -q "Running"; then
        minikube start --memory=6656 --cpus=4 --driver=docker -p $MINIKUBE_PROFILE
      else
        echo "Minikube profile $MINIKUBE_PROFILE is already running"
      fi
    - minikube update-context -p $MINIKUBE_PROFILE
    # - export VAULT_ADDR=$(minikube service vault -p $MINIKUBE_PROFILE --url)
    # - export VAULT_TOKEN="root"
    - echo "Terraform will use vault at ${VAULT_ADDR}"

    - |
      if [[ "$CI_JOB_STAGE" == "apply" ]]; then
        export VAULT_ADDR=$(minikube service vault -p $MINIKUBE_PROFILE --url)
        echo "Terraform will use vault at: $VAULT_ADDR"
      else
        echo "Skipping vault address port for plan/validate stage"
      fi
    - export VAULT_TOKEN="root"
    
validate_terraform:
  extends: .terraform-template
  stage: validate
  script:
    - terraform validate

plan_for_merge_request_terraform:
  extends: .terraform-template
  stage: plan
  script:
    - terraform plan
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

plan_for_master_terraform:
  extends: .terraform-template
  stage: plan
  script:
    - terraform plan -out="plan.tfplan"
  artifacts:
    name: "plan"
    paths:
      - "${TF_ROOT}/plan.tfplan"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

apply_terraform:
  extends: .terraform-template
  stage: apply
  script:
    - terraform apply -input=false "plan.tfplan"
  dependencies:
    - plan_for_master_terraform
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
