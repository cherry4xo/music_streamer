version: '3.9'

services:
  postgres-auth:
    image: postgres:15-alpine
    container_name: postgres-auth
    environment:
      POSTGRES_USER: ${POSTGRES_USER_AUTH_USER}
      POSTGRES_PASSWORD: ${POSTGRES_USER_AUTH_PASSWORD}
      POSTGRES_DB: ${POSTGRES_USER_AUTH_DB}
    ports:
      - "5433:5432"
    networks:
      - musicnet
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d users_auth_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-account:
    image: postgres:15-alpine
    container_name: postgres-account-local
    environment:
      POSTGRES_USER: ${POSTGRES_USER_ACCOUNT_USER}
      POSTGRES_PASSWORD: ${POSTGRES_USER_ACCOUNT_PASSWORD}
      POSTGRES_DB: ${POSTGRES_USER_ACCOUNT_DB}
    ports:
      - "5434:5432"
    networks:
      - musicnet
    volumes:
      - postgres-account-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U account_user -d users_account_db"]
      interval: 5s
      timeout: 5s
      retries: 5


  redis:
    image: redis:6.2-alpine
    container_name: redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    networks:
      - musicnet
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - musicnet

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - musicnet
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    
    healthcheck:
      # This command tries to list topics. It will only succeed if the broker is fully up.
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  krakend:
    # Use the official image
    build:
      context: .
      dockerfile: ./services/platform/krakend/Dockerfile
      args:
        - ENV=local
        - SERVICE_PATH=./services/platform/krakend
    container_name: krakend
    ports:
      - "8088:8080" # Expose Krakend on host port 8088
    networks:
      - musicnet
    volumes:
      - ./terraform/certs/ca.crt:/etc/krakend/certs/ca.crt:ro
      - ./terraform/certs/krakend.crt:/etc/krakend/certs/krakend.crt:ro
      - ./terraform/certs/krakend.key:/etc/krakend/certs/krakend.key:ro
    command: ["krakend", "run", "-d", "-c", "/etc/krakend/krakend.json"]
    depends_on:
      # Krakend should wait for the apps to be healthy
      users-auth:
        condition: service_healthy

  users-auth:
    build: ./services/business/users-auth
    container_name: users-auth
    env_file: ./.env
    volumes:
      - ./services/business/users-auth:/usr/src/users
      - ./terraform/certs/users-auth.crt:/etc/tls/tls.crt:ro
      - ./terraform/certs/users-auth.key:/etc/tls/tls.key:ro
      - ./terraform/certs/ca.crt:/etc/tls/ca.crt:ro
    command:
      - "uvicorn"
      - "main:app"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "8080"
      - "--ssl-keyfile=/etc/tls/tls.key"
      - "--ssl-certfile=/etc/tls/tls.crt"
      - "--ssl-ca-certs=/etc/tls/ca.crt"
    ports:
      - "8001:8080"
    networks:
      - musicnet
    healthcheck:
      test: ["CMD", "curl", "--fail", "--insecure", "https://localhost:8080/.well-known/jwks.json"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 20s
    depends_on:
      postgres-auth:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  users-account:
    build: ./services/business/users-account
    container_name: users-account
    env_file: ./.env
    volumes:
      - ./services/business/users-account:/usr/src/users
      - ./terraform/certs/users-account.crt:/etc/tls/tls.crt:ro
      - ./terraform/certs/users-account.key:/etc/tls/tls.key:ro
      - ./terraform/certs/ca.crt:/etc/tls/ca.crt:ro
    command:
      - "uvicorn"
      - "main:app"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "8080"
      - "--ssl-keyfile=/etc/tls/tls.key"
      - "--ssl-certfile=/etc/tls/tls.crt"
      - "--ssl-ca-certs=/etc/tls/ca.crt"
    ports:
      - "8002:8080"
    networks:
      - musicnet
    depends_on:
      postgres-account:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

networks:
  musicnet:
    driver: bridge

volumes:
  postgres-auth-data:
  postgres-account-data: